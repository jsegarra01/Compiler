start { } null var type id ; = lit * / + - ( ) if else && || == < > != loop func , return
program ::= <func_space> <main_space>
main_space ::= start { <code> }
code ::= <var_decs> <ccode>
var_decs ::= <var_dec> <var_decs> | null
var_dec ::= var type id <var_dec_extra>
var_dec_extra ::= ; | = lit ;
ccode ::= <var_ass> <ccode> | <if_stat> <ccode> | <loop_stat> <ccode> | null
var_ass ::= id = <math_exp> ;
math_exp ::= <math> <math_exp_ex>
math_exp_ex ::= null | <math_op1> <math> <math_exp_ex>
math ::= <math_fac> <math_ex>
math_ex ::= null | <math_op2> <math>
math_fac ::= <lit_iden> | ( <math_exp> )
math_op1 ::= + | -
math_op2 ::= * | /
lit_iden ::= id | lit
if_stat ::= if ( <bool_exp> ) { <ccode> } <else_stat_ex>
else_stat_ex ::= null | <else_stat>
else_stat ::= else { <ccode> }
loop_stat ::= loop ( <bool_exp> ) { <ccode> }
bool_exp ::= <bool_stat> <bool_chain_ex>
bool_chain_ex ::= null | <bool_chain> <bool_exp>
bool_chain ::= && | ||
bool_stat ::= <lit_iden> <bool_op> <lit_iden>
bool_op ::= == | < | > | !=
func_space ::= <func_dec> <func_space> | null
func_dec ::= func <type> <fidentifier> ( <func_exp> ) { <func_code> }
func_exp ::= null | <func_foll>
func_foll ::= <func_term> <func_foll_ex>
func_foll_ex ::= null | , <func_foll>
func_term ::= <type> <var_identifier>
func_code ::= <code> <func_return>
func_return ::= return <lit_iden> ;